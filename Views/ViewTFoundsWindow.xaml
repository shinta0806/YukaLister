<Window x:Class="YukaLister.Views.ViewTFoundsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:sb="clr-namespace:Shinta.Behaviors"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        Title="{Binding Title}" Height="600" Width="1000" ResizeMode="CanResizeWithGrip" ShowInTaskbar="False" >

    <Window.DataContext>
        <vm:ViewTFoundsWindowViewModel/>
    </Window.DataContext>

    <Window.InputBindings>
        <KeyBinding Gesture="Ctrl+F" Command="{Binding ButtonFindKeywordClickedCommand}"/>
    </Window.InputBindings>

    <i:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsCascade="True" MinimizeBox="False"/>
    </i:Interaction.Behaviors>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="OpenEditMusicInfoWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:EditMusicInfoWindow}" Mode="Modal" IsOwned="True" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="OpenFolderSettingsWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:FolderSettingsWindow}" Mode="Modal" IsOwned="True" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="OpenFindKeywordWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:FindKeywordWindow}" Mode="Normal" IsOwned="True"/>
        </l:InteractionMessageTrigger>
        
        <l:InteractionMessageTrigger MessageKey="FindKeyword" Messenger="{Binding Messenger}">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="FindKeywordRequested"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <DockPanel>
        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="20,15,20,0">
            <Label Content="検索対象のすべてのファイルについて、リストに表示される内容を一覧で確認できます。"/>
            <Label x:Name="LabelHelp">
                <Hyperlink Command="{Binding HelpClickedCommand}" CommandParameter="Fileichiranwindow" >
                    <TextBlock Text="詳細情報" />
                </Hyperlink>
            </Label>
        </StackPanel>
        <DockPanel DockPanel.Dock="Bottom" Margin="20,0,20,20" LastChildFill="False">
            <Button x:Name="ButtonEditMusicInfo" Content="編集 (_E)" Width="140" Height="Auto" ToolTip="タイアップ名・楽曲名を編集" Command="{Binding ButtonEditMusicInfoClickedCommand}"/>
            <Button x:Name="ButtonFolderSettings" Content="フォルダー設定 (_S)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="140" Height="Auto" Margin="20,0,0,0" ToolTip="フォルダーの検索設定" Padding="4" Command="{Binding ButtonFolderSettingsClickedCommand}"/>
            <Button x:Name="ButtonFind" Content="検索 (_F)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="120" Height="Auto" Margin="40,0,0,0" ToolTip="キーワード検索" Command="{Binding ButtonFindKeywordClickedCommand}" />
            <Button x:Name="ButtonFindEmptyCell" Content="□↓検索 (_G)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="120" Height="Auto" Margin="20,0,0,0" ToolTip="空欄のセルを検索" Command="{Binding ButtonFindCellClickedCommand}"/>
            <Button x:Name="ButtonFindNormalCell" Content="■↓検索 (_H)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="120" Height="Auto" Margin="20,0,0,0" ToolTip="空欄ではないセルの検索" Command="{Binding ButtonFindCellClickedCommand}" CommandParameter="Fill" />
            <Button x:Name="ButtonCancel" Content="閉じる (_C)" Width="100" Height="Auto" IsCancel="True" DockPanel.Dock="Right"/>
        </DockPanel>
        <DataGrid x:Name="DataGridList" Margin="20,10,20,20" AutoGenerateColumns="False" CanUserReorderColumns="False" SelectionMode="Single" IsReadOnly="True" DockPanel.Dock="Top" 
                  ItemsSource="{Binding TFounds}" SelectedItem="{Binding SelectedTFound}"
                  materialDesign:DataGridAssist.ColumnHeaderPadding="3 5 3 5" materialDesign:DataGridAssist.CellPadding="3" >
            <DataGrid.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding DataGridDoubleClickedCommand}" />
            </DataGrid.InputBindings>
            <i:Interaction.Behaviors>
                <sb:DataGridBindingSupportBehavior Columns="{Binding Columns}" CurrentCellLocation="{Binding CurrentCellLocation}" SortingCommand="{Binding DataGridListSortingCommand}"/>
            </i:Interaction.Behaviors>
        </DataGrid>
    </DockPanel>
</Window>
