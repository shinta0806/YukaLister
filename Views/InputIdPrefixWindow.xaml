<Window x:Class="YukaLister.Views.InputIdPrefixWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:sb="clr-namespace:Shinta.Behaviors"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        Title="{Binding Title}" SizeToContent="WidthAndHeight" ResizeMode="NoResize" >
    
    <Window.DataContext>
        <vm:InputIdPrefixWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsCascade="True" MinimizeBox="False"/>
    </i:Interaction.Behaviors>
    
    <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <Label Content="各種 ID の先頭に付与する文字列を設定します。" Margin="20,15,0,0" HorizontalAlignment="Left"/>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="20,0,0,0">
            <Label Content="お好きな文字列で構いませんが、パソコンごとに異なる文字列を指定してください。" VerticalAlignment="Center"/>
            <Label x:Name="LabelHelp" Margin="0" HorizontalAlignment="Left">
                <Hyperlink Command="{Binding HelpClickedCommand}" CommandParameter="IdSettouji" >
                    <TextBlock Text="詳細情報" />
                </Hyperlink>
            </Label>
        </StackPanel>
        <TextBox x:Name="TextBoxIdPrefix" Text="{Binding IdPrefix, UpdateSourceTrigger=PropertyChanged}" Margin="20,10,20,0" Width="500" HorizontalAlignment="Left" sb:IsFocusedAttachedBehavior.IsFocused="{Binding IsIdPrefixFocused}"/>
        <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft" Margin="20">
            <Button x:Name="ButtonCancel" Content="キャンセル" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Width="100" Padding="4"/>
            <Button x:Name="ButtonOK" Content="OK" Margin="20,0,0,0" Height="Auto" IsDefault="True" Width="100" Command="{Binding ButtonOKClickedCommand}"/>
        </StackPanel>
    </StackPanel>
</Window>
