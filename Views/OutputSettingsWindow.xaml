<Window x:Class="YukaLister.Views.OutputSettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:mb="clr-namespace:YukaLister.Models.Behaviors"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        Title="{Binding Title}" ResizeMode="NoResize" ShowInTaskbar="False" SizeToContent="WidthAndHeight" >
    
    <Window.DataContext>
        <vm:OutputSettingsWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <StackPanel>
            <TabControl x:Name="TabControlOutputSettings" ItemsSource="{Binding TabItems}" SelectedIndex="{Binding SelectedTabIndex}" MinHeight="{Binding MinTabControlHeight}" MinWidth="{Binding MinTabControlWidth}" Margin="0,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <i:Interaction.Behaviors>
                    <mb:FrameworkElementBindingSupportBehavior ActualHeight="{Binding ActualTabControlHeight}" ActualWidth="{Binding ActualTabControlWidth}" />
                </i:Interaction.Behaviors>
            </TabControl>
        </StackPanel>
        <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft" Margin="0,20,20,20">
            <Button x:Name="ButtonCancel" Content="キャンセル" Margin="0" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Width="100" Padding="4"/>
            <Button x:Name="ButtonOK" Content="OK" Margin="20,0,0,0" Height="Auto" IsDefault="True" Width="100" Command="{Binding ButtonOkClickedCommand}" mb:IsFocusedAttachedBehavior.IsFocused="{Binding IsButtonOkFocused}"/>
        </StackPanel>
    </StackPanel>
</Window>
