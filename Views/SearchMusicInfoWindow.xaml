<Window x:Class="YukaLister.Views.SearchMusicInfoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:mb="clr-namespace:YukaLister.Models.Behaviors"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        SizeToContent="WidthAndHeight" ResizeMode="NoResize" ShowInTaskbar="False" Title="{Binding Title}" Cursor="{Binding Cursor}" >
    
    <Window.DataContext>
        <vm:SearchMusicInfoWindowViewModel/>
    </Window.DataContext>
    
     <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <Label x:Name="LabelDescription" Content="{Binding Description}" Margin="20,15,0,0"/>
        <DockPanel Margin="20,5,20,0">
            <Button x:Name="ButtonSearch" Content="検索 (_S)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="100" Height="Auto" DockPanel.Dock="Right" Command="{Binding ButtonSearchClickedCommand}"/>
            <TextBox x:Name="TextBoxKeyword" Text="{Binding Keyword, UpdateSourceTrigger=PropertyChanged}" ToolTip="ここに検索したいキーワードを入力して下さい。" ToolTipService.ShowDuration="10000" materialDesign:HintAssist.Hint="{Binding ElementName=TextBoxKeyword, Path=ToolTip}" mb:IsFocusedAttachedBehavior.IsFocused="{Binding IsKeywordFocused}" VerticalAlignment="Center" Margin="0,0,5,0">
                <TextBox.InputBindings>
                    <KeyBinding Gesture="Enter" Command="{Binding ButtonSearchClickedCommand}" />
                </TextBox.InputBindings>
                <i:Interaction.Behaviors>
                    <l:TextBoxBindingSupportBehavior SelectedText="{Binding SelectedKeyword}" />
                </i:Interaction.Behaviors>
            </TextBox>
        </DockPanel>
        <Label x:Name="LabelFounds" Content="{Binding FoundsDescription}" Margin="20,5,0,0"/>
        <ListBox x:Name="ListBoxFounds" Width="380" Height="200" Margin="20,10,20,0" ItemsSource="{Binding Founds}" SelectedItem="{Binding SelectedFound}" mb:IsFocusedAttachedBehavior.IsFocused="{Binding AreFoundsFocused}"/>
        <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft" Margin="20">
            <Button x:Name="ButtonCancel" Content="キャンセル" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Width="100" Padding="4"/>
            <Button x:Name="ButtonSelect" Content="選択" Margin="20,0,0,0" Height="Auto" IsDefault="True" Width="100" Command="{Binding ButtonSelectClickedCommand}" />
        </StackPanel>
    </StackPanel>
</Window>
