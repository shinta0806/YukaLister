<Window x:Class="YukaLister.Views.YukaListerSettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:s="clr-namespace:Shinta"
        xmlns:sb="clr-namespace:Shinta.Behaviors"
        xmlns:msm="clr-namespace:YukaLister.Models.SharedMisc"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        x:Name="SettingsWindow" Title="{Binding Title}" ResizeMode="NoResize" ShowInTaskbar="False" SizeToContent="WidthAndHeight" 
        sb:LaunchUpdaterAttachedBehavior.UpdaterLauncher="{Binding UpdaterLauncher}" sb:LaunchUpdaterAttachedBehavior.Command="{Binding UpdaterUiDisplayedCommand}">
    
    <Window.DataContext>
        <vm:YukaListerSettingsWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsCascade="True"/>
    </i:Interaction.Behaviors>
    
    <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="OpenOutputSettingsWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:OutputSettingsWindow}" Mode="Modal" IsOwned="True" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="OpenImportWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:ImportWindow}" Mode="Modal" IsOwned="True" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="OpenOpenFileDialog" Messenger="{Binding Messenger}">
            <l:OpenFileDialogInteractionMessageAction/>
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="OpenSaveFileDialog" Messenger="{Binding Messenger}">
            <l:SaveFileDialogInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <TabControl x:Name="TabControlYukaListerSettings" Height="480" Width="570" Margin="10,10,10,0" SelectedIndex="{Binding SelectedTabIndex}" sb:FileDropAttachedBehavior.Command="{Binding TabControlFileDropCommand}">
            <TabItem x:Name="TabItemSettings" Header="設定" >
                <StackPanel >
                    <DockPanel Margin="20,20,20,0">
                        <Label Content="ゆかり設定ファイル (_Y)：" VerticalAlignment="Center" />
                        <Button x:Name="ButtonBrowseYukariConfigPathSeed" Height="Auto" Content="参照 (_B)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseYukariConfigPathSeedClickedCommand}"/>
                        <TextBox x:Name="TextBoxYukariConfigPathSeed" Text="{Binding YukariConfigPathSeed}" VerticalAlignment="Center" Margin="0,0,10,0" />
                    </DockPanel>
                </StackPanel>
            </TabItem>
            <TabItem x:Name="TabItemTarget" Header="リスト対象">
                <StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,20,0,0">
                        <Label Content="リスト化対象ファイルの拡張子 (_E)：" Width="220" HorizontalContentAlignment="Right"/>
                        <ListBox x:Name="ListBoxTargetExts" ItemsSource="{Binding TargetExts}" SelectedItem="{Binding SelectedTargetExt}" Width="220" Height="100" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="220,10,0,0">
                        <Button x:Name="ButtonAddExt" Height="Auto" Content="↑ 追加 (_A)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonAddExtClickedCommand}"/>
                        <Button x:Name="ButtonRemoveExt" Height="Auto" Content="× 削除 (_R)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="20,0,0,0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonRemoveExtClickedCommand}"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <Label Content="（追加したい拡張子）" Width="220" HorizontalContentAlignment="Right"/>
                        <TextBox x:Name="TextBoxTargetExt" Text="{Binding AddingTargetExt, UpdateSourceTrigger=PropertyChanged}" Width="220" VerticalAlignment="Center" />
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem x:Name="TabItemOutput" Header="リスト出力">
                <StackPanel>
                    <DockPanel Margin="0,10,0,0">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0" Width="20"/>
                        <Label Content="ゆかりリクエスト用リスト（PHP）" Margin="10,0"/>
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0"/>
                    </DockPanel>
                    <DockPanel Margin="20,10,20,0">
                        <Button x:Name="ButtonYukariListSettings" Height="Auto" Content="出力設定 (_S)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Padding="0,4" Command="{Binding ButtonYukariListSettingsClickedCommand}"/>
                        <Label Content="ゆかりリクエスト用リストは、常に自動的に出力・更新されます。"/>
                    </DockPanel>
                    <StackPanel Margin="20,10,0,0">
                        <Label Content="リスト出力先は、ゆかり設定ファイルがあるフォルダーの配下となります。"/>
                    </StackPanel>
                    <DockPanel Margin="0,10,130,0">
                        <Label Content="リスト出力先フォルダー：" Width="170" HorizontalContentAlignment="Right"/>
                        <TextBox x:Name="TextBoxYukariListFolder" Text="{Binding YukariListFolder}" VerticalAlignment="Center" IsReadOnly="True"/>
                    </DockPanel>
                    <StackPanel Margin="20,10,0,0">
                        <CheckBox x:Name="CheckBoxClearPrevList" IsChecked="{Binding ClearPrevList}" Content="起動時に前回のゆかりリクエスト用リストをクリアする (_C)" />
                    </StackPanel>
                    <DockPanel Margin="0,20,0,0">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0" Width="20"/>
                        <Label Content="閲覧用リスト" Margin="10,0"/>
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0"/>
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="リスト出力形式 (_F)：" Width="170" HorizontalContentAlignment="Right"/>
                        <Button x:Name="ButtonListSettings" Height="Auto" Content="出力設定 (_T)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Padding="0,4" Command="{Binding ButtonListSettingsClickedCommand}"/>
                        <ComboBox x:Name="ComboBoxListFormat" ItemsSource="{Binding ListFormats}" SelectedItem="{Binding SelectedListFormat}" Margin="0,0,10,0"/>
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="リスト出力先フォルダー (_O)：" Width="170" HorizontalContentAlignment="Right"/>
                        <Button x:Name="ButtonBrowseListFolder" Height="Auto" Content="参照 (_B)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Padding="0,4" >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <l:FolderBrowserDialogInteractionMessageAction>
                                        <l:DirectInteractionMessage CallbackMethodName="ListFolderSelected" CallbackMethodTarget="{Binding}">
                                            <l:FolderSelectionMessage Description="リスト出力先フォルダーの選択" DialogPreference="None" />
                                        </l:DirectInteractionMessage>
                                    </l:FolderBrowserDialogInteractionMessageAction>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                        <TextBox x:Name="TextBoxListFolder" Text="{Binding ListFolder}" VerticalAlignment="Center" Margin="0,0,10,0"/>
                    </DockPanel>
                    <StackPanel Margin="0,10,20,0" HorizontalAlignment="Right">
                        <Button x:Name="ButtonOutputList" Height="Auto" Content="閲覧用リスト出力 (_O)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="200" Command="{Binding ButtonOutputListClickedCommand}"/>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem x:Name="TabItemMaintenance" Header="メンテナンス">
                <StackPanel>
                    <StackPanel Margin="20,20,0,0">
                        <CheckBox x:Name="CheckBoxCheckRss" Content="ゆかりすたーの最新情報・更新版を自動的に確認する (_L)" IsChecked="{Binding CheckRss}" />
                    </StackPanel>
                    <DockPanel Margin="20,10,20,0">
                        <Button x:Name="ButtonCheckRss" Height="Auto" Content="今すぐ最新情報を確認する (_A)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" DockPanel.Dock="Right" Padding="4" Command="{Binding ButtonCheckRssClickedCommand}"/>
                        <ProgressBar x:Name="ProgressBarCheckRss" Height="Auto" Margin="0,0,10,0" Visibility="{Binding ProgressBarCheckRssVisibility}" IsIndeterminate="True"/>
                    </DockPanel>
                    <StackPanel Margin="20,10,0,0">
                        <Label Content="ログを保存する"/>
                    </StackPanel>
                    <StackPanel Margin="0,10,20,0">
                        <Button x:Name="ButtonLog" Height="Auto" Content="ログ保存(_X)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" DockPanel.Dock="Right" HorizontalAlignment="Right" Command="{Binding ButtonLogClickedCommand}"/>
                    </StackPanel>
                    <StackPanel Margin="20,10,0,0">
                        <CheckBox x:Name="CheckBoxSyncMusicInfoDb" Content="楽曲情報データベースを同期する (_S)" IsChecked="{Binding SyncMusicInfoDb}" />
                    </StackPanel>
                    <DockPanel Margin="0,10,20,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="サーバー URL (_U)：" Width="170" HorizontalContentAlignment="Right"/>
                        <TextBox x:Name="TextBoxSyncServer" Text="{Binding SyncServer}" VerticalAlignment="Center"/>
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="アカウント名 (_A)：" Width="170" HorizontalContentAlignment="Right"/>
                        <TextBox x:Name="TextBoxSyncAccount" Text="{Binding SyncAccount}" VerticalAlignment="Center"/>
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="パスワード (_P)：" Width="170" HorizontalContentAlignment="Right"/>
                        <PasswordBox x:Name="PasswordBoxSyncPassword" VerticalAlignment="Center">
                            <i:Interaction.Behaviors>
                                <l:PasswordBoxBindingSupportBehavior Password="{Binding SyncPassword}" />
                            </i:Interaction.Behaviors>
                        </PasswordBox>
                    </DockPanel>
                    <StackPanel Margin="20,10,0,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="強制的に楽曲情報データベースの内容をサーバーに合わせる（ローカルデータは失われます）"/>
                    </StackPanel>
                    <StackPanel Margin="0,10,20,0">
                        <Button x:Name="ButtonReget" Height="Auto" Content="強制的に合わせる (_F)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" DockPanel.Dock="Right" HorizontalAlignment="Right" Command="{Binding ButtonRegetClickedCommand}"/>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem x:Name="TabItemImport" Header="インポート">
                <StackPanel>
                    <StackPanel Margin="20,20,0,0">
                        <RadioButton x:Name="RadioButtonImportYukaLister" Content="ゆかりすたーでエクスポートしたファイルをインポート (_Y)" IsChecked="{Binding ImportYukaListerMode}" IsEnabled="False" GroupName="Import" />
                    </StackPanel>
                    <DockPanel Margin="40,10,20,0">
                        <Button x:Name="ButtonBrowseImportYukaLister" Height="Auto" Content="参照 (_1)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseImportYukaListerClickedCommand}"/>
                        <TextBox x:Name="TextBoxImportYukaLister" Text="{Binding ImportYukaListerPath}" IsEnabled="False" VerticalAlignment="Center" Margin="0,0,10,0"/>
                    </DockPanel>
                    <StackPanel Margin="20,20,0,0">
                        <RadioButton x:Name="RadioButtonImportAnisonInfoCsv" Content="anison.info CSV をインポート (_A)" IsChecked="{Binding ImportAnisonInfoMode}" GroupName="Import" />
                    </StackPanel>
                    <!-- anison.info CSV 補完が正しく行われるよう、anison.info テキストボックスの UpdateSourceTrigger を PropertyChanged にする -->
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="program.csv (.zip) (_P)：" Width="190" HorizontalContentAlignment="Right"/>
                        <Button x:Name="ButtonBrowseImportProgramCsv" Height="Auto" Content="参照 (_2)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseImportProgramCsvClickedCommand}"/>
                        <TextBox x:Name="TextBoxImportProgramCsv" Text="{Binding ImportProgramCsvPath, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding ImportAnisonInfoMode}" VerticalAlignment="Center" Margin="0,0,10,0" />
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="anison.csv (.zip) (_O)：" Width="190" HorizontalContentAlignment="Right"/>
                        <Button x:Name="ButtonBrowseImportAnisonCsv" Height="Auto" Content="参照 (_3)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseImportAnisonCsvClickedCommand}"/>
                        <TextBox x:Name="TextBoxImportAnisonCsv" Text="{Binding ImportAnisonCsvPath, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding ImportAnisonInfoMode}" VerticalAlignment="Center" Margin="0,0,10,0" />
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="sf.csv (.zip) (_S)：" Width="190" HorizontalContentAlignment="Right"/>
                        <Button x:Name="ButtonBrowseImportSfCsv" Height="Auto" Content="参照 (_4)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseImportSfCsvClickedCommand}"/>
                        <TextBox x:Name="TextBoxImportSfCsv" Text="{Binding ImportSfCsvPath, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding ImportAnisonInfoMode}" VerticalAlignment="Center" Margin="0,0,10,0" />
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="game.csv (.zip) (_G)：" Width="190" HorizontalContentAlignment="Right"/>
                        <Button x:Name="ButtonBrowseImportGameCsv" Height="Auto" Content="参照 (_5)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseImportGameCsvClickedCommand}"/>
                        <TextBox x:Name="TextBoxImportGameCsv" Text="{Binding ImportGameCsvPath, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding ImportAnisonInfoMode}" VerticalAlignment="Center" Margin="0,0,10,0" />
                    </DockPanel>
                    <StackPanel Margin="20,20,0,0">
                        <RadioButton x:Name="RadioButtonImportNicoKaraLister" Content="ニコカラりすたーでエクスポートしたファイルをインポート (_N)" IsChecked="{Binding ImportNicoKaraListerMode}" GroupName="Import" />
                    </StackPanel>
                    <DockPanel Margin="40,10,20,0">
                        <Button x:Name="ButtonBrowseImportNicoKaraLister" Height="Auto" Content="参照 (_5)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseImportNicoKaraListerClickedCommand}"/>
                        <TextBox x:Name="TextBoxImportNicoKaraLister" Text="{Binding ImportNicoKaraListerPath}" IsEnabled="{Binding ImportNicoKaraListerMode}" VerticalAlignment="Center" Margin="0,0,10,0"/>
                    </DockPanel>
                    <DockPanel Margin="0,20,0,0">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0"/>
                    </DockPanel>
                    <StackPanel Margin="0,20,20,0">
                        <Button x:Name="ButtonImport" Height="Auto" Content="インポート (_I)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" HorizontalAlignment="Right" Command="{Binding ButtonImportClickedCommand}"/>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem x:Name="TabItemExport" Header="エクスポート"/>
        </TabControl>
        <DockPanel Margin="20">
            <Button x:Name="ButtonCancel" Content="キャンセル" Margin="0" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Width="100" DockPanel.Dock="Right" Padding="4"/>
            <Button x:Name="ButtonOk" Content="OK" Margin="0,0,20,0" Height="Auto" IsDefault="True" Width="100" DockPanel.Dock="Right" Command="{Binding ButtonOkClickedCommand}" sb:IsFocusedAttachedBehavior.IsFocused="{Binding IsButtonOkFocused}"/>
            <Label Content="設定やデータベースメンテナンス等を行います。" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Center"/>
            <Label x:Name="LabelHelp" Grid.Column="1" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Left">
                <Hyperlink Command="{Binding HelpClickedCommand}" CommandParameter="Kankyousettei" >
                    <TextBlock Text="詳細情報" />
                </Hyperlink>
            </Label>
        </DockPanel>
    </StackPanel>
</Window>
