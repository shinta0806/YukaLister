<Window x:Class="YukaLister.Views.FindKeywordWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:sb="clr-namespace:Shinta.Behaviors"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        Title="{Binding Title}" WindowStyle="ToolWindow" ResizeMode="NoResize" ShowInTaskbar="False" Topmost="True" SizeToContent="WidthAndHeight" >
    
    <Window.DataContext>
        <vm:FindKeywordWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsActive="{Binding IsActive}" />
    </i:Interaction.Behaviors>

    <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="Activate" Messenger="{Binding Messenger}">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Activate"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <TextBox x:Name="TextBoxKeyword" ToolTip="ここに検索したいキーワードを入力して下さい。" ToolTipService.ShowDuration="10000" materialDesign:HintAssist.Hint="{Binding ElementName=TextBoxKeyword, Path=ToolTip}" Margin="20,20,20,0" Width="400" Text="{Binding Keyword, UpdateSourceTrigger=PropertyChanged}" sb:IsFocusedAttachedBehavior.IsFocused="{Binding IsKeywordFocused}" >
            <i:Interaction.Behaviors>
                <l:TextBoxBindingSupportBehavior SelectedText="{Binding SelectedKeyword}" />
            </i:Interaction.Behaviors>
        </TextBox>
        <CheckBox x:Name="CheckBoxCaseSensitive" Content="大文字と小文字を区別する (_C)" Margin="20,10,20,0" IsChecked="{Binding CaseSensitive}"/>
        <CheckBox x:Name="CheckBoxWholeMatch" Content="セルの内容全体が一致するものを検索する (_W)" Margin="20,10,20,0" IsChecked="{Binding WholeMatch}"/>
        <DockPanel Margin="20">
            <Button x:Name="ButtonFindPrev" Content="前を検索 (_P)" Width="120" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" Command="{Binding ButtonFindClickedCommand}" CommandParameter="Backward"/>
            <Button x:Name="ButtonFindNext" Content="次を検索 (_N)" Margin="20,0,0,0" Width="120" Height="Auto" IsDefault="True" Command="{Binding ButtonFindClickedCommand}"/>
            <Button x:Name="ButtonCancel" Content="閉じる" HorizontalAlignment="Right" Width="100" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Command="{Binding ButtonCancelClickedCommand}"/>
        </DockPanel>
    </StackPanel>
</Window>
