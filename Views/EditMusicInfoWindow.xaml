<Window x:Class="YukaLister.Views.EditMusicInfoWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:sb="clr-namespace:Shinta.Behaviors"
        xmlns:msm="clr-namespace:YukaLister.Models.SharedMisc"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        Title="{Binding Title}" ResizeMode="NoResize" ShowInTaskbar="False" SizeToContent="WidthAndHeight">

    <Window.DataContext>
        <vm:EditMusicInfoWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsCascade="True" MinimizeBox="False"/>
    </i:Interaction.Behaviors>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="OpenSearchMusicInfoWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:SearchMusicInfoWindow}" Mode="Modal" IsOwned="True" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="OpenEditTieUpWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:EditTieUpWindow}" Mode="Modal" IsOwned="True" />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="OpenEditSongWindow" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:EditSongWindow}" Mode="Modal" IsOwned="True" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <StackPanel Orientation="Horizontal" Margin="0,15">
            <Label Content="ファイル：" Margin="20,0,0,0" HorizontalAlignment="Left"/>
            <Label x:Name="LabelPath" Margin="0" HorizontalAlignment="Left">
                <ContentPresenter  RecognizesAccessKey="False" Content="{Binding FileName}" ></ContentPresenter>
            </Label>
        </StackPanel>
        <StackPanel Orientation="Horizontal" Margin="20,0">
            <GroupBox Header="ファイル名・フォルダー固定値から取得した名称" Padding="5" Margin="0" materialDesign:ColorZoneAssist.Mode="Accent">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="210"/>
                    </Grid.ColumnDefinitions>
                    <Label Content="タイアップ名：" Margin="0" HorizontalAlignment="Right" Grid.Row="1"/>
                    <Label x:Name="LabelTieUpName" Content="{Binding DicByFile[program]}" Margin="0" Grid.Row="1" Grid.Column="1"/>
                    <Label x:Name="LabelTieUpNameRegistered" Margin="0" Grid.Row="2" Grid.Column="1">
                        <Label.Style>
                            <Style TargetType="{x:Type Label}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsTieUpNameRegistered}" Value="True">
                                        <Setter Property="Content" Value="（データベース登録済）"/>
                                        <Setter Property="Foreground" Value="Black"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsTieUpNameRegistered}" Value="False">
                                        <Setter Property="Content" Value="（データベース未登録）"/>
                                        <Setter Property="Foreground" Value="Red"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                    <Label Content="楽曲名：" Margin="0" HorizontalAlignment="Right" Grid.Row="4"/>
                    <Label x:Name="LabelSongName" Content="{Binding DicByFile[title]}" Margin="0" Grid.Row="4" Grid.Column="1"/>
                    <Label x:Name="LabelSongNameRegistered" Margin="0" Grid.Row="5" Grid.Column="1">
                        <Label.Style>
                            <Style TargetType="{x:Type Label}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSongNameRegistered}" Value="True">
                                        <Setter Property="Content" Value="（データベース登録済）"/>
                                        <Setter Property="Foreground" Value="Black"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSongNameRegistered}" Value="False">
                                        <Setter Property="Content" Value="（データベース未登録）"/>
                                        <Setter Property="Foreground" Value="Red"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                </Grid>
            </GroupBox>
            <GroupBox Header="名称を揃える（データベース登録済の名称に名寄せする）" Padding="5" Margin="10,0,0,0" materialDesign:ColorZoneAssist.Mode="Accent">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="80"/>
                        <ColumnDefinition Width="70"/>
                        <ColumnDefinition Width="210"/>
                    </Grid.ColumnDefinitions>
                    <CheckBox x:Name="CheckBoxUseTieUpAlias" Content="タイアップ名を揃える" Grid.ColumnSpan="3" IsChecked="{Binding UseTieUpAlias}" />
                    <Label Content="正式名称：" Margin="0" HorizontalAlignment="Right" Grid.Row="1"/>
                    <Button x:Name="ButtonSearchTieUpOrigin" Content="検索" Grid.Row="1" Grid.Column="1" Height="Auto" FontSize="12" Padding="2" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0,5,5,5" Command="{Binding ButtonSearchTieUpOriginClickedCommand}"/>
                    <Label x:Name="LabelTieUpOrigin" Content="{Binding TieUpOrigin}" Margin="0" Grid.Row="1" Grid.Column="2"/>
                    <CheckBox x:Name="CheckBoxUseSongAlias" Content="楽曲名を揃える" Grid.Row="3" Grid.ColumnSpan="3" IsChecked="{Binding UseSongAlias}" />
                    <Label Content="正式名称：" Margin="0" HorizontalAlignment="Right" Grid.Row="4"/>
                    <Button x:Name="ButtonSearchSongOrigin" Content="検索" Grid.Row="4" Grid.Column="1" Height="Auto" FontSize="12" Padding="2" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0,5,5,5" Command="{Binding ButtonSearchSongOriginClickedCommand}"/>
                    <Label x:Name="LabelSongOrigin" Content="{Binding SongOrigin}" Margin="0" Grid.Row="4" Grid.Column="2"/>
                </Grid>
            </GroupBox>
            <GroupBox Header="データベース編集" Padding="5" Margin="10,0,0,0" materialDesign:ColorZoneAssist.Mode="Accent">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="130"/>
                    </Grid.ColumnDefinitions>
                    <Button x:Name="ButtonEditTieUp" Content="タイアップ詳細編集" Grid.Row="1" Height="20" FontSize="12" Padding="2" Margin="5,0" Style="{StaticResource MaterialDesignRaisedLightButton}" Command="{Binding ButtonEditTieUpClickedCommand}"/>
                    <Button x:Name="ButtonEditSong" Content="楽曲詳細編集" Grid.Row="4" Height="20" FontSize="12" Padding="2" Margin="5,0" Style="{StaticResource MaterialDesignRaisedLightButton}" Command="{Binding ButtonEditSongClickedCommand}"/>
                </Grid>
            </GroupBox>
        </StackPanel>
        <DockPanel Margin="20">
            <Button x:Name="ButtonCancel" Content="キャンセル" Margin="0" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Width="100" DockPanel.Dock="Right" Padding="4"/>
            <Button x:Name="ButtonOk" Content="OK" Margin="0,0,20,0" Height="Auto" IsDefault="True" Width="100" DockPanel.Dock="Right" Command="{Binding ButtonOkClickedCommand}"/>
            <Label Content="ファイル名等から取得した名称が間違っている場合でも楽曲情報データベースを適用できるようにします。" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Center"/>
            <Label x:Name="LabelHelp" Grid.Column="1" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Left">
                <Hyperlink Command="{Binding HelpClickedCommand}" CommandParameter="NamaewoSoroeru" >
                    <TextBlock Text="詳細情報" />
                </Hyperlink>
            </Label>
        </DockPanel>
    </StackPanel>
</Window>
